package com.hello.code_block;

/**
 * Java中用{ }括起来的代码段就是代码块,他分为如下几种类型
 *
 *              位置              作用
 * 局部代码块	在main方法里面        给变量限定生命周期,局部代码块的变量在执行结束后会被Java回收
 * 构造代码块	在类的成员位置         在每次执行构造方法前先执行构造代码块,可以将多个构造方法中的相同的代码放到构造代码块中,对对象进行初始化.
 * 静态代码块	在类的成员位置	        一般用于给类初始化,被静态修饰的代码块仅执行一次.
 *
 * 注意构造代码块,构造方法,静态代码块的优先级为:
 *     静态代码块>构造代码块>构造方法;
 *
 *
 * 总结
 *      Java中的静态变量和静态代码块是在类加载的时候就执行的，实例化对象时，先声明并实例化变量再执行构造函数。如果子类继承父类，则先执行父类的静态变量和静态代码块，再执行子类的静态变量和静态代码块。
 *      同样，接着在执行父类和子类非静态代码块和构造函数。
 *
 * 注意：（静态）变量和（静态）代码块的也是有执行顺序的，与代码书写的顺序一致。在（静态）代码块中可以使用（静态）变量，但是被使用的（静态）变量必须在（静态）代码块前面声明。
 *
 *  最后给出执行步骤：
 *
 *      1、父类静态变量和静态代码块（先声明的先执行）；
 *
 *      2、子类静态变量和静态代码块（先声明的先执行）；
 *
 *      3、父类的变量和代码块（先声明的先执行）；
 *
 *      4、父类的构造函数；
 *
 *      5、子类的变量和代码块（先声明的先执行）；
 *
 *      6、子类的构造函数。
 */
public class DemoClass {

    public static void main(String[] args) {
        test_1();
        System.out.println("--------------------------------");
        test_2();
    }

    public static void test_1() {
        Apple apple = new Apple();
        apple.method();
        System.out.println("=================================");
        Pear pear = new Pear();
        pear.method();

    }

    public static void test_2() {
        Banana banana = new Banana();
        banana.method();
    }
}
